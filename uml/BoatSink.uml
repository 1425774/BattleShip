@startuml

GameController ..> Printer
GameController -> "2" Player : creates
Player --> Board : contains
Board --> "18" Cell : contains
Cell --> "0..1" Ship
Board --> "4" Ship : contains   


class Board [[java:boatSink.Board]] {
	-int nRows
	-int nCols
	-Cell[][] cells
	-ArrayList<Ship> ships
	
	~Board(int nRows, int nCols)
	-void setAllCellsWater()
	#boolean createShip(int x0, int y0, String orientation, Ship ship)
	#boolean isShipCell(int x, int y)
	#boolean shoot(int x, int y)
	#boolean isEndGame()
	+String toString()
}

class Cell [[java:boatSink.Cell]] {
	-int x
	-int y
	-Ship ship
	
	~Cell(int x, int y, Ship ship)
	+void setShip(Ship ship)
	+Ship getShip()
	+boolean isShip(int x, int y)
	+void shootShip(int x, int y)
	+boolean isShipDown(int x, int y)
	+String toString()
}

class Constants [[java:boatSink.Constants]] {
	+{static} N_BOARD_ROWS_CELLS :int
	+{static}int N_PLAYERS
	+{static}String SHIP_HORIZONTAL
	+{static}String SHIP_VERTICAL
}

class GameController [[java:boatSink.GameController]] {
	-{static}int playersCount
	-{static}ArrayList<Player> players
	-{static}String input
	-{static}Scanner scanner
	
	+{static}void main(String[] args)
	+{static}void playOneGame(int playersCount)
	+{static}void initializeGame()
	+{static}int makePlay(int currentPlayerId)
	+{static}void waitBetweenChangingPlayerTurn()
	+{static}boolean endOfGame()
	+{static}void printWinner(int playerId)
	+{static}boolean isCorrectShipOrientation(String shipOrientation)
	+{static}boolean isCorrectInputCoordinate(String coordinate)
	+{static}boolean isCorrectPlayerName(String playerName)
}

class Player [[java:boatSink.Player]] {
	-String name
	-Board shipsBoard
	-String[][] shootsBoard
	
	~Player(String name, Board board)
	-void setAllShootsBoardWater()
	+String getName()
	+Board getBoard()
	+boolean isEndGame()
	+boolean shoot(int x, int y)
	+String toString()
}

class Printer [[java:boatSink.Printer]] {
	-{static}Printer printer
	
	+{static}Printer getInstance()
	+void showBoard()
	+void askNumberOfShips(int nCells)
	+void askPositionShip(String nombre)
	+void askX()
	+void askY()
	+void askNameShip()
	+void askLengthShip()
	+void askOrientationShip()
}

class Ship [[java:boatSink.Ship]] {
	-int nCells
	-int health
	-boolean[][] down
	
	~Ship(int health)
	+int getNCells()
	+void setHealth(int health)
	+int getHealth()
	+boolean[][] setAllShipsDownFalse()
	+void setDown(int x, int y)
	+boolean isDown(int x, int y)
	+boolean isSunk()
	+void shoot(int x, int y)
	+boolean isCorrectCoordinates(int x, int y)
}

class OneCellShip [[java:boatSink.OneCellShip]] extends Ship {
	-{static}int HEALTH
	
	~OneCellShip()
	~OneCellShip(int health)
}

class TwoCellShip [[java:boatSink.TwoCellShip]] extends Ship {
	-{static}int HEALTH
	
	~OneCellShip()
	~OneCellShip(int health)
}

class ThreeCellShip [[java:boatSink.ThreeCellShip]] extends Ship {
	-{static}int HEALTH
	
	~OneCellShip()
	~OneCellShip(int health)
}

class FourCellShip [[java:boatSink.FourCellShip]] extends Ship {
	-{static}int HEALTH
	
	~OneCellShip()
	~OneCellShip(int health)
}

@enduml